{"version":3,"sources":["logo.svg","Layout/ChipArray.js","Layout/TablePage.js","Layout/ExcelPage.js","Layout/UploadPage.js","Layout/Filter.js","App.js","reportWebVitals.js","index.js"],"names":["ChipArray","props","handleClick","e","console","log","target","outerText","userID","toggleUser","userMapping","nameArray","names","split","map","v","length","color","variant","selected","Chip","size","onClick","label","useStyles","makeStyles","theme","container","height","display","alignItems","justifyContent","item","backgroundColor","main","width","overflowX","paddingTop","paddingBottom","mainOnResultView","transition","timetable","footer","options","selectableRows","pagination","TablePage","classes","styledColumns","columns","i","name","filter","sort","customBodyRender","value","tableMeta","updateValue","Grid","direction","justify","className","title","data","table","ExcelPage","xlstable","filteredTable","UploadPage","history","useHistory","form","useRef","ref","onSubmit","preventDefault","files","setTable","push","type","onChange","root","paddingLeft","Filter","useState","setValue","years","Typography","id","gutterBottom","Slider","event","newValue","filterYears","valueLabelDisplay","aria-labelledby","step","marks","min","max","createMuiTheme","palette","primary","indigo","secondary","red","dayMapping","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag","Sonntag","rows","App","initArray","Array","fill","index","concat","setxlstable","outputTable","setOutputTable","setUserMapping","setYears","renderTarget","setRenderTarget","createUserID","u1","u2","trim","processTable","template","input","headerRow","timeMapping","matches","match","submatch","findIndex","registrationRow","time","selectedDays","dayWithSpace","day","useEffect","tableUpload","filename","readXlsxFile","then","processedTable","mapping","r","rowMapping","createUserMapping","uniqueyears","Set","a","b","handleViewToggle","viewExcel","viewTimetable","filteredtable","row","userid","newMapping","CssBaseline","ThemeProvider","basename","window","location","pathname","exact","path","render","FormControlLabel","control","checked","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d417430.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect, useRef } from \"react\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { StayPrimaryLandscape } from \"@material-ui/icons\";\n\nexport const ChipArray = (props) => {\n  const handleClick = (e) => {\n    console.log(\"You clicked the Chip with name\");\n    console.log(e.target.outerText);\n    const userID = e.target.outerText;\n    //console.log(props.userMapping[userID]);\n    //console.log(userID in props.userMapping);\n    props.toggleUser(userID);\n\n    //console.log(userMapping[e.target.outerText]);\n  };\n\n  const userMapping = props.userMapping;\n\n  const nameArray = props.names.split(\";\").map((v) => {\n    if (v.length < 1) {\n      //console.log(txt.length);\n      return \"\";\n    }\n\n    if (!(v in userMapping)) {\n      //console.log(\"Did not find user \" + v);\n    }\n    var color = \"primary\";\n    var variant = \"outlined\";\n\n    if (v in userMapping) {\n      const selected = userMapping[v][\"selected\"];\n      color = selected ? \"secondary\" : \"primary\";\n      variant = selected ? \"default\" : \"outlined\";\n    }\n    return (\n      <div>\n        <Chip\n          key={v}\n          size=\"small\"\n          color={color}\n          onClick={handleClick}\n          variant={variant}\n          label={v}\n        />\n      </div>\n    );\n  });\n\n  return <div>{nameArray}</div>;\n};\n\nexport default ChipArray;\n","import React, { useState, useRef } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport MUIDataTable from \"mui-datatables\";\nimport { Typography } from \"@material-ui/core\";\n\nimport readXlsxFile from \"read-excel-file\";\n\nimport ChipArray from \"./ChipArray\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  item: {\n    backgroundColor: \"blue\",\n  },\n\n  main: {\n    width: \"100%\",\n    overflowX: \"auto\",\n    paddingTop: \"24px\",\n    paddingBottom: \"12px\",\n  },\n  mainOnResultView: {\n    height: \"83%\",\n    width: \"100%\",\n    transition: \"height 1s\",\n  },\n  timetable: {\n    width: \"100%\",\n  },\n  footer: {\n    height: \"5%\",\n    backgroundColor: \"black\",\n  },\n}));\n\nconst options = {\n  selectableRows: \"none\",\n  pagination: false,\n};\n\nconst processTable = (xls, template) => {\n  return [];\n};\n\nexport const TablePage = (props) => {\n  const classes = useStyles();\n  const userMapping = props.userMapping;\n\n  //console.log(props.table);\n  //console.log(userMapping);\n\n  //copy columns to add some styling options from the table\n  const columns = [...props.columns];\n\n  const styledColumns = columns.map((v, i) => {\n    if (i > 0) {\n      //day columns start from second column\n      const styling = {\n        name: v,\n        options: {\n          filter: true,\n          sort: false,\n          customBodyRender: (value, tableMeta, updateValue) => (\n            <ChipArray\n              toggleUser={props.toggleUser}\n              names={value}\n              userMapping={userMapping}\n            />\n          ),\n        },\n      };\n      return styling;\n    } else {\n      return v;\n    }\n  });\n  //console.log(styledColumns);\n\n  return (\n    <Grid container direction=\"column\" alignItems=\"center\">\n      <MUIDataTable\n        container\n        justify=\"space-between\"\n        className={classes.timetable}\n        title={\"Zeitplan\"}\n        data={props.table}\n        columns={styledColumns}\n        options={options}\n      />\n    </Grid>\n  );\n};\nexport default TablePage;\n","import React, { useState, useRef } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport MUIDataTable from \"mui-datatables\";\nimport { Typography } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  item: {\n    backgroundColor: \"blue\",\n  },\n\n  main: {\n    width: \"100%\",\n    overflowX: \"auto\",\n    paddingTop: \"24px\",\n    paddingBottom: \"12px\",\n  },\n  mainOnResultView: {\n    height: \"83%\",\n    width: \"100%\",\n    transition: \"height 1s\",\n  },\n  timetable: {\n    width: \"100%\",\n  },\n  footer: {\n    height: \"5%\",\n    backgroundColor: \"black\",\n  },\n}));\n\nconst options = {\n  selectableRows: \"none\",\n  pagination: false,\n};\nconst columns = [\"Name\", \"Vorname\", \"Spielpartner\", \"Kommentar\"];\n\nexport const ExcelPage = (props) => {\n  const classes = useStyles();\n  console.log(props.xlstable);\n\n  const filteredTable = props.xlstable.map((v) => [v[1], v[2], v[34], v[29]]);\n\n  return (\n    <Grid container direction=\"column\" alignItems=\"center\">\n      <MUIDataTable\n        container\n        justify=\"space-between\"\n        className={classes.timetable}\n        title={\"Anmeldungen\"}\n        data={filteredTable}\n        columns={columns}\n        options={options}\n      />\n    </Grid>\n  );\n};\nexport default ExcelPage;\n","import React, { useState, useRef } from \"react\";\nimport readXlsxFile from \"read-excel-file\";\nimport { useHistory } from \"react-router-dom\";\n\nconst UploadPage = (props) => {\n  const history = useHistory();\n  const form = useRef(null);\n\n  const onFileChange = (e) => {\n    console.log(e);\n  };\n\n  const onFileUpload = (e) => {\n    e.preventDefault();\n    console.log(\"Path to be loaded: \");\n    console.log(e.target[0].files[0]);\n    props.setTable(e.target[0].files[0]);\n\n    history.push(\"/\");\n  };\n\n  return (\n    <div>\n      <h1>Tabelle hochladen</h1>\n      <h3>Hier die Tabelle aus dem Formular</h3>\n      <div>\n        <form ref={form} onSubmit={onFileUpload}>\n          <input type=\"file\" onChange={onFileChange} />\n          <input type=\"submit\" name=\"Hochladen\" />\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default UploadPage;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\n\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: 600,\n    paddingTop: \"24px\",\n    paddingBottom: \"12px\",\n    paddingLeft: \"12px\",\n  },\n});\n\nconst Filter = (props) => {\n  const classes = useStyles();\n  const [value, setValue] = useState([1980, 2020]);\n  const [marks, setMarks] = useState([]);\n  const years = props.years;\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n    props.filterYears(newValue);\n    //console.log(newValue);\n  };\n\n  function valuetext(value) {\n    return `${value}`;\n  }\n\n  return (\n    <div className={classes.root}>\n      <Typography id=\"range-slider\" gutterBottom>\n        Jahrgänge {value[0]} - {value[1]}\n      </Typography>\n      <Slider\n        value={value}\n        onChange={handleChange}\n        valueLabelDisplay=\"auto\"\n        aria-labelledby=\"range-slider\"\n        step={10}\n        marks\n        min={1950}\n        max={2025}\n        step={1}\n        getAriaValueText={valuetext}\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","import React, { useState, useEffect, useRef } from \"react\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nimport readXlsxFile from \"read-excel-file\";\n\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport indigo from \"@material-ui/core/colors/indigo\";\nimport green from \"@material-ui/core/colors/green\";\nimport red from \"@material-ui/core/colors/red\";\nimport MaterialSwitch from \"@material-ui/core/Switch\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport TablePage from \"./Layout/TablePage\";\nimport ExcelPage from \"./Layout/ExcelPage\";\nimport UploadPage from \"./Layout/UploadPage\";\nimport Filter from \"./Layout/Filter\";\nimport { Typography } from \"@material-ui/core\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: indigo[700],\n    },\n    secondary: {\n      main: red[600],\n    },\n  },\n});\n\nconst columns = [\n  \"\",\n  \"Montag\",\n  \"Dienstag\",\n  \"Mittwoch\",\n  \"Donnerstag\",\n  \"Freitag\",\n  \"Samstag\",\n  \"Sonntag\",\n];\n\nconst dayMapping = {\n  Montag: 1,\n  Dienstag: 2,\n  Mittwoch: 3,\n  Donnerstag: 4,\n  Freitag: 5,\n  Samstag: 6,\n  Sonntag: 7,\n};\n\nconst rows = [\n  \"9:00\",\n  \"9:30\",\n  \"10:00\",\n  \"10:30\",\n  \"11:00\",\n  \"11:30\",\n  \"12:00\",\n  \"12:30\",\n  \"13:00\",\n  \"13:30\",\n  \"14:00\",\n  \"14:30\",\n  \"15:00\",\n  \"15:30\",\n  \"16:00\",\n  \"16:30\",\n  \"17:00\",\n  \"17:30\",\n  \"18:00\",\n  \"18:30\",\n  \"19:00\",\n  \"19:30\",\n  \"20:00\",\n  \"20:30\",\n  \"21:00\",\n];\n\nfunction App() {\n  const initArray = new Array(rows.length)\n    .fill(0)\n    .map((v, index) =>\n      [rows[index]].concat(new Array(columns.length).fill(\"\"))\n    );\n  const [xlstable, setxlstable] = useState([]);\n  const [outputTable, setOutputTable] = useState(initArray);\n  const [userMapping, setUserMapping] = useState({});\n  const [years, setYears] = useState([]);\n  const [renderTarget, setRenderTarget] = useState(true);\n\n  const createUserMapping = (rows) => {\n    const mapping = {};\n    const headerRow = rows[0];\n    rows.map((r) => {\n      const userID = createUserID(r[1], r[2]).trim();\n      const rowMapping = {};\n      for (var i = 0; i < headerRow.length; i++) {\n        rowMapping[headerRow[i]] = r[i];\n      }\n      rowMapping[\"selected\"] = false;\n      mapping[userID] = rowMapping;\n    });\n    return mapping;\n  };\n\n  //have the same ID for all user related data processing\n  const createUserID = (u1, u2) => {\n    return u1.trim() + \", \" + u2.trim();\n  };\n\n  const processTable = (template, input) => {\n    const table = [...template];\n    //console.log(\"Template table:\");\n    //console.log(table);\n    //create mapping of time columns from template to export table\n    const headerRow = input[0];\n    const timeMapping = {};\n    headerRow.map((v, i) => {\n      const matches = v.match(/\\[(.*?)\\]/);\n      if (matches) {\n        const submatch = matches[1];\n        const index = rows.findIndex((e) => e == submatch);\n\n        timeMapping[submatch] = i;\n      }\n      //console.log(timeMapping);\n    });\n    //timemapping = {\"9:00\":<columnNumber in excel>}\n\n    const processedTable = input.map((registrationRow, index) => {\n      //console.log(registrationRow);\n      rows.map((time, index) => {\n        const selectedDays = registrationRow[timeMapping[time]];\n        const name = createUserID(registrationRow[1], registrationRow[2]);\n        if (!!selectedDays) {\n          //console.log(time + \" - \" + selectedDays + \": \" + name);\n          //parse days by comma\n          const days = selectedDays.split(\",\");\n          //insert name for each day and time into the table\n          days.map((dayWithSpace) => {\n            const day = dayWithSpace.trim();\n            //console.log(\"Cell value to be updated: \" + index + \", \" + day);\n            if (day.trim() in dayMapping) {\n              table[index][dayMapping[day]] = table[index][\n                dayMapping[day]\n              ].concat(name.trim() + \";\");\n            }\n          });\n        }\n      });\n    });\n    //console.log(\"Processed result:\");\n    //console.log(table);\n    return table;\n  };\n\n  const toggleUser = (userid) => {\n    console.log(\n      \"Toggled \" +\n        userid +\n        \" which is currently \" +\n        userMapping[userid][\"selected\"]\n    );\n    const newMapping = { ...userMapping };\n    newMapping[userid][\"selected\"] = userMapping[userid][\"selected\"]\n      ? false\n      : true;\n\n    //console.log(newMapping[userid][\"selected\"]);\n    setUserMapping(newMapping);\n    return true;\n  };\n\n  //to skip the load button for testing, auto-load a file from public folder\n  useEffect(() => {\n    const done = \"\";\n    //tableUpload(\"/anmeldung2.xlsx\"); //for testing only\n    setRenderTarget(<ExcelPage xlstable={xlstable} />);\n\n    return done;\n  }, []);\n\n  const filterYears = (filterYears) => {\n    const originaltable = [...xlstable];\n    const filteredtable = originaltable.filter((row) => {\n      if (typeof row[3] != \"number\") return row;\n      //this seems a header line\n      else if (row[3] >= filterYears[0] && row[3] <= filterYears[1]) return row;\n    });\n    const processedTable = processTable(initArray, filteredtable);\n    setOutputTable(processedTable);\n    //const processedTable = processTable(initArray, rows);\n    //setOutputTable(processedTable);\n    console.log(\"Filter years triggered\");\n    //console.log(filterYears);\n    //console.log(filteredtable);\n    return true;\n  };\n\n  const tableUpload = (filename) => {\n    //fetch(filename)\n    //  .then((response) => response.arrayBuffer())\n    readXlsxFile(filename)\n      .then((rows) => {\n        const loadedexcel = rows;\n        setxlstable(loadedexcel);\n        //transform google table to table with days + times on axes and names in cell\n        const processedTable = processTable(initArray, rows);\n        setOutputTable(processedTable);\n        //create map of user IDs to all the other data\n        const mapping = createUserMapping(rows);\n        setUserMapping(mapping);\n        //get possible Jahrgänge\n        const skipHeader = rows.filter((r) => typeof r[3] == \"number\");\n        const years = skipHeader.map((r) => r[3]);\n        const uniqueyears = [...new Set(years)].sort((a, b) => a - b);\n\n        setYears(uniqueyears); //only unique years in the array\n      })\n      .then(() => {\n        console.log(\"Loaded Excel: \");\n      });\n  };\n\n  const handleViewToggle = (event) => {\n    renderTarget ? setRenderTarget(false) : setRenderTarget(true);\n  };\n\n  const viewExcel = (\n    <div>\n      <ExcelPage xlstable={xlstable} />\n    </div>\n  );\n  const viewTimetable = (\n    <div>\n      <Filter years={years} filterYears={filterYears} />\n      <TablePage\n        columns={columns}\n        userMapping={userMapping}\n        toggleUser={toggleUser}\n        table={outputTable}\n      />\n    </div>\n  );\n\n  const createView = () => {\n    return renderTarget ? viewExcel : viewTimetable;\n  };\n\n  return (\n    <>\n      <CssBaseline />\n      <ThemeProvider theme={theme}>\n        <Router basename={window.location.pathname || \"\"}>\n          <Switch>\n            <Route\n              exact\n              path=\"/upload\"\n              render={(props) => (\n                <UploadPage setTable={tableUpload} {...props} />\n              )}\n            />\n            <Route\n              exact\n              path=\"/excel\"\n              render={(props) => <ExcelPage xlstable={xlstable} {...props} />}\n            />\n            <Route\n              exact\n              path=\"/\"\n              render={(props) => (\n                <div>\n                  <FormControlLabel\n                    control={\n                      <MaterialSwitch\n                        checked={renderTarget}\n                        onChange={handleViewToggle}\n                        name=\"view\"\n                      />\n                    }\n                    label=\"Anmeldungen / Namen Sicht\"\n                  />\n\n                  {createView()}\n                </div>\n              )}\n            />\n          </Switch>\n        </Router>\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}